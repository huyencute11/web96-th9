import bcrypt from "bcrypt";
import Account from "../models/Account.js";
import Customer from "../models/Customer.js";
import Property from "../models/Property.js";
import jwt from "jsonwebtoken";
import Employee from "../models/Employee.js";
import { v2 as cloudinary } from "cloudinary";
import upload from "../middlewares/uploadFile.js";
import Manager from "../models/Manager.js";
import DepositOrder from "../models/DepositOrder.js";

const AccountController = {
  // API dang ky tai khoan
  register: async (req, res) => {
    try {
      const {
        email,
        password,
        role,
        isActive,
        name,
        phone,
        address,
        department,
      } = req.body;
      // Ki·ªÉm tra th√¥ng tin ƒë·∫ßu v√†o
      if (!email || !password) {
        return res
          .status(400)
          .json({ message: "Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" });
      }
      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingAccount = await Account.findOne({ email });
      if (existingAccount) {
        return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
      }
      // M√£ h√≥a m·∫≠t kh·∫©u
      const hashedPassword = await bcrypt.hash(password, 10);
      // T·∫°o t√†i kho·∫£n m·ªõi
      const newAccount = new Account({
        email,
        password: hashedPassword,
        role: role || "CUSTOMER", // N·∫øu kh√¥ng cung c·∫•p role, m·∫∑c ƒë·ªãnh l√† CUSTOMER
        isActive,
      });

      // L∆∞u t√†i kho·∫£n v√†o database
      await newAccount.save();
      //Luu vao customer
      if (role === "CUSTOMER") {
        const newCustomer = new Customer({
          name,
          email,
          phone,
          address,
          accountId: newAccount._id,
        });
        await newCustomer.save();
      }
      if (role === "MANAGER") {
        const newManager = new Manager({
          name,
          email,
          phone,
          department,
          accountId: newAccount._id,
        });
        await newManager.save();
      }

      res.status(201).json({
        message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
        account: {
          email: newAccount.email,
          role: newAccount.role,
        },
      });
    } catch (error) {
      console.error("Error during registration:", error);
      res
        .status(500)
        .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω" });
    }
  },
  //  4. Vi·∫øt API ƒëƒÉng nh·∫≠p t√†i kho·∫£n, n·∫øu isActive l√† true cho ph√©p ƒëƒÉng nh·∫≠p (tr·∫£ v·ªÅ c√°c token)
  // POST /login
  login: async (req, res) => {
    try {
      const { email, password } = req.body;
      // Ki·ªÉm tra th√¥ng tin ƒë·∫ßu v√†o
      if (!email || !password) {
        return res
          .status(400)
          .json({ message: "Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" });
      }
      // T√¨m t√†i kho·∫£n trong database
      const account = await Account.findOne({ email });
      if (!account) {
        return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
      }
      // Ki·ªÉm tra m·∫≠t kh·∫©u
      const isPasswordValid = await bcrypt.compare(password, account.password);
      if (!isPasswordValid) {
        return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" });
      }
      // Ki·ªÉm tra t√†i kho·∫£n c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
      if (!account.isActive) {
        return res.status(403).json({ message: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a" });
      }
      // Tr·∫£ v·ªÅ th√¥ng tin t√†i kho·∫£n
      const token = jwt.sign(
        { email: account.email, role: account.role },
        "huyentran",
        { expiresIn: "1h" }
      );

      res.status(200).json({
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
        token: token,
        account: {
          email: account.email,
          role: account.role,
        },
      });
    } catch (error) {
      console.error("Error during login:", error);
      res
        .status(500)
        .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p" });
    }
  },

  // Vi·∫øt API l·∫•y th√¥ng tin c√° nh√¢n t∆∞∆°ng ·ª©ng v·ªõi role c·ªßa t√†i kho·∫£n
  // GET /account/profile
  getProfile: async (req, res) => {
    try {
      const { email } = req.query;
      console.log("email", email);
      const account = await Account.findOne({ email });
      if (!account) {
        return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
      }
      res.status(200).json({
        email: account.email,
        role: account.role,
      });
    } catch (error) {
      console.error("Error during getting profile:", error);
      res
        .status(500)
        .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh l·∫•y th√¥ng tin" });
    }
  },
  //Vi·∫øt API cho ph√©p ng∆∞·ªùi d√πng t·∫°o th√¥ng tin c√° nh√¢n theo role t∆∞∆°ng ·ª©ng c·ªßa t√†i kho·∫£n (Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p)

  // POST /account/profile
  createProfile: async (req, res) => {
    try {
      const { email } = req.query;
      const account = await Account.findOne({ email });
      if (!account) {
        return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
      }
      const { name, address, phone } = req.body;
      account.profile = { name, address, phone };
      await account.save();
      res.status(200).json({
        message: "T·∫°o th√¥ng tin c√° nh√¢n th√†nh c√¥ng",
        profile: account.profile,
      });
    } catch (error) {
      console.error("Error during creating profile:", error);
      res
        .status(500)
        .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫°o th√¥ng tin" });
    }
  },
  // Vi·∫øt API cho ph√©p Manager (qu·∫£n l√Ω) t·∫°o t√†i kho·∫£n, th√¥ng tin cho Employee (nh√¢n vi√™n)

  // POST /account/employee
  createEmployee: async (req, res) => {
    try {
      const { email } = req.query;
      const account = await Account.findOne({ email });
      if (!account) {
        return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
      }
      if (account.role !== "MANAGER") {
        return res
          .status(403)
          .json({ message: "Ch·ªâ Manager m·ªõi ƒë∆∞·ª£c ph√©p t·∫°o nh√¢n vi√™n" });
      }
      const {
        email: employeeEmail,
        name,
        phone,
        department,
        password,
        role,
        isActive,
      } = req.body;

      const existingAccount = await Account.findOne({ email: employeeEmail });
      if (existingAccount) {
        return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
      }

      const hashedPassword = await bcrypt.hash(password, 10);
      const newAccount = new Account({
        email: employeeEmail,
        password: hashedPassword,
        role,
        isActive,
      });
      await newAccount.save();

      const newEmployee = new Employee({
        name: name,
        email: employeeEmail,
        phone,
        department,
        managerId: account._id,
        accountId: newAccount._id,
      });
      await newEmployee.save();

      res.status(201).json({
        message: "T·∫°o nh√¢n vi√™n th√†nh c√¥ng",
        account: {
          email: newAccount.email,
          role: newAccount.role,
        },
        employee: {
          name: newEmployee.name,
          email: newEmployee.email,
          phone: newEmployee.phone,
          department: newEmployee.department,
        },
      });
    } catch (error) {
      console.error("Error during creating employee:", error);
      res
        .status(500)
        .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫°o nh√¢n vi√™n" });
    }
  },

  //8. Vi·∫øt API cho ph√©p Manager (qu·∫£n l√Ω) ho·∫∑c Employee (nh√¢n vi√™n) t·∫°o
  //  th√¥ng tin Property (nh√† ·ªü) (Bao g·ªìm c·∫£ th√¥ng tin h√¨nh ·∫£nh c·ªßa cƒÉn nh√†)
  // POST /account/property
  createProperty2: async (req, res) => {
    upload(req, res, async (err) => {
      if (err) {
        return res
          .status(500)
          .json({ message: "File upload failed", error: err.message });
      }

      try {
        const { email } = req.query;
        const account = await Account.findOne({ email });
        if (!account) {
          return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
        }
        if (account.role !== "MANAGER" && account.role !== "EMPLOYEE") {
          return res.status(403).json({
            message: "Ch·ªâ Manager ho·∫∑c Employee m·ªõi ƒë∆∞·ª£c ph√©p t·∫°o nh√†",
          });
        }
        const { address, price, area, status } = req.body;
        const file = req.file;
        console.log("üöÄ ~ createProperty: ~ file:", req.body);
        if (!file) {
          return res.status(400).json({ message: "H√¨nh ·∫£nh l√† b·∫Øt bu·ªôc" });
        }

        const dataUrl = `data:${file.mimetype};base64,${file.buffer.toString(
          "base64"
        )}`;
        const fileName = file.originalname.split(".")[0];
        const result = await cloudinary.uploader.upload(dataUrl, {
          public_id: fileName,
          resource_type: "auto",
        });

        await Property.create({
          address,
          price,
          area,
          status,
          image: result.secure_url,
          employeeId: account._id,
        });

        res.status(201).json({
          message: "T·∫°o nh√† th√†nh c√¥ng",
          property: {
            address,
            price,
            area,
            status,
            image: result.secure_url,
          },
        });
      } catch (error) {
        console.error("Error during creating property:", error);
        res
          .status(500)
          .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫°o nh√†" });
      }
    });
  },
  // 9. Vi·∫øt API cho ph√©p Manager (qu·∫£n l√Ω) ho·∫∑c Employee (nh√¢n vi√™n) c·∫≠p nh·∫≠t th√¥ng tin Property (nh√† ·ªü) (Bao g·ªìm c·∫£ th√¥ng tin h√¨nh ·∫£nh c·ªßa cƒÉn nh√†)
  // PUT /account/property/:id
  updateProperty: async (req, res) => {
    upload(req, res, async (err) => {
      if (err) {
        return res
          .status(500)
          .json({ message: "File upload failed", error: err.message });
      }

      try {
        const { email } = req.query;
        const account = await Account.findOne({ email });
        if (!account) {
          return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
        }
        if (account.role !== "MANAGER" && account.role !== "EMPLOYEE") {
          return res.status(403).json({
            message: "Ch·ªâ Manager ho·∫∑c Employee m·ªõi ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t nh√†",
          });
        }
        const updateFields = {};
        const { address, price, area, status } = req.body;
        if (address) updateFields.address = address;
        if (price) updateFields.price = price;
        if (area) updateFields.area = area;
        if (status) updateFields.status = status;

        const file = req?.file;
        if (file) {
          const dataUrl = `data:${file.mimetype};base64,${file.buffer.toString(
            "base64"
          )}`;
          const fileName = file.originalname.split(".")[0];
          const result = await cloudinary.uploader.upload(dataUrl, {
            public_id: fileName,
            resource_type: "auto",
          });
          updateFields.image = result.secure_url;
        }

        const updatedProperty = await Property.findByIdAndUpdate(
          req.params.id,
          { $set: updateFields },
          { new: true }
        );

        res.status(200).json({
          message: "C·∫≠p nh·∫≠t nh√† th√†nh c√¥ng",
          property: updatedProperty,
        });
      } catch (error) {
        console.error("Error during updating property:", error);
        res
          .status(500)
          .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t nh√†" });
      }
    });
  },

  // 10 Vi·∫øt API cho ph√©p Customer (kh√°ch h√†ng) t·∫°o ƒë∆°n ƒë·∫∑t c·ªçc
  // POST /account/createDepositOrder
  createDepositOrder: async (req, res) => {
    try {
      const { email } = req.query;
      const account = await Account.findOne({ email });
      if (!account) {
        return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
      }
      if (account.role !== "CUSTOMER") {
        return res.status(403).json({
          message: "Ch·ªâ Customer m·ªõi ƒë∆∞·ª£c ph√©p t·∫°o ƒë∆°n ƒë·∫∑t c·ªçc",
        });
      }

      const { propertyId, depositAmount } = req.body;
      const property = await Property.findById(propertyId);
      if (!property) {
        return res.status(404).json({ message: "Nh√† kh√¥ng t·ªìn t·∫°i" });
      }
      const newOrder = {
        customerId: account._id,
        propertyId,
        depositAmount,
        date: new Date(),
        status: "Ch·ªù x·ª≠ l√Ω",
      };
      await DepositOrder.create(newOrder);
      res.status(201).json({
        message: "T·∫°o ƒë∆°n ƒë·∫∑t c·ªçc th√†nh c√¥ng",
        order: newOrder,
      });
    } catch (error) {
      console.error("Error during creating deposit order:", error);
      res
        .status(500)
        .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫°o ƒë∆°n ƒë·∫∑t c·ªçc" });
    }
  },
  //1111Vi·∫øt API cho ph√©p  Manager (qu·∫£n l√Ω) ho·∫∑c Employee (nh√¢n vi√™n) l·∫•y th√¥ng tin c√°c ƒë∆°n ƒë·∫∑t c·ªçc,
  // k√®m theo th√¥ng tin c·ªßa kh√°ch h√†ng (t√™n, email, s·ªë ƒëi·ªán tho·∫°i) (C√≥ th·ª±c hi·ªán ph√¢n trang, filter, sort)
  // GET /account/depositOrders
  getDepositOrders: async (req, res) => {
    try {
      const { email } = req.query;
      const account = await Account.findOne({ email });
      if (!account) {
        return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
      }
      if (account.role !== "MANAGER" && account.role !== "EMPLOYEE") {
        return res.status(403).json({
          message: "Ch·ªâ Manager ho·∫∑c Employee m·ªõi ƒë∆∞·ª£c ph√©p xem ƒë∆°n ƒë·∫∑t c·ªçc",
        });
      }
      const { page, limit } = req.query;

      const orders = await DepositOrder.find({
        depositAmount: { $lt: 45000000 },
      })
        .skip((page - 1) * limit)
        .limit(limit)
        .sort({ depositAmount: -1 });
      // $lt ==>less than = nho hon
      // $gt ==> greater than or equal = lon hon hoac bang <=

      res.status(200).json({
        orders,
      });
    } catch (error) {
      console.error("Error during getting deposit orders:", error);
      res
        .status(500)
        .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh l·∫•y ƒë∆°n ƒë·∫∑t c·ªçc" });
    }
  },
  //12. Vi·∫øt API cho ph√©p Customer (kh√°ch h√†ng) xem th√¥ng tin c√°c ƒë∆°n ƒë·∫∑t c·ªçc c·ªßa b·∫£n th√¢n bao g·ªìm th√¥ng Property (Nh√† ·ªü)
  //  v√† Employee (nh√¢n vi√™n) (t√™n, email, s·ªë ƒëi·ªán tho·∫°i)
  //  h·ªó tr·ª£ cho ƒë∆°n ƒë√≥ (l√† nh√¢n vi√™n c√≥ tr√°ch nhi·ªám v·ªõi cƒÉn nh√† ƒë·∫∑t c·ªçc) (C√≥ th·ª±c hi·ªán ph√¢n trang, filter).
  // GET /account/myDepositOrders
  getMyDepositOrders: async (req, res) => {
    try {
      const { email } = req.params;
      const account = await Account.findOne({ email });
      if (!account) {
        return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
      }
      if (account.role !== "CUSTOMER") {
        return res.status(403).json({
          message: "Ch·ªâ Customer m·ªõi ƒë∆∞·ª£c ph√©p xem ƒë∆°n ƒë·∫∑t c·ªçc c·ªßa m√¨nh",
        });
      }
      const { page, limit } = req.query;
      const orders = await DepositOrder.find({ customerId: account._id })
        .skip((page - 1) * limit)
        .limit(limit);
      const data = [];
      orders.forEach(async (order) => {
        const property = await Property.findById(order.propertyId);
        const employee = await Account.findOne({ _id: property.employeeId });
      
      });
      res.status(200).json({
        orders,
      });
    } catch (error) {
      console.error("Error during getting my deposit orders:", error);
      res
        .status(500)
        .json({ message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh l·∫•y ƒë∆°n ƒë·∫∑t c·ªçc" });
    }
  },
  //Vi·∫øt API cho ph√©p Nh√¢n vi√™n (Employee) xem danh s√°ch nh√† ·ªü m√† h·ªç ƒëang qu·∫£n l√Ω (C√≥ th·ª±c hi·ªán ph√¢n trang, filter, sort)
  // GET /account/myProperties
  getMyProperties: async (req, res) => {
    try {
      const { email } = req.query;
      const account = await Account.findOne({ email });
      if (!account) {
        return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
      }
      if (account.role !== "EMPLOYEE") {
        return res.status(403).json({
          message: "Ch·ªâ Employee m·ªõi ƒë∆∞·ª£c ph√©p xem nh√† m√¨nh qu·∫£n l√Ω",
        });
      }
      const { page, limit } = req.query;
      const properties = await Property.find({ employeeId: account._id })
        .skip((page - 1) * limit)
        .limit(limit)
        .sort({ price: -1 });
      res.status(200).json({
        properties,
      });
    } catch (error) {
      console.error("Error during getting my properties:", error);
      res.status(500).json({
        message: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh l·∫•y nh√† m√¨nh qu·∫£n l√Ω",
      });
    }
  },
};

export default AccountController;
